{"ast":null,"code":"module.exports = AlgoliaSearch;\n\nvar Index = require('./Index.js');\n\nvar deprecate = require('./deprecate.js');\n\nvar deprecatedMessage = require('./deprecatedMessage.js');\n\nvar AlgoliaSearchCore = require('./AlgoliaSearchCore.js');\n\nvar inherits = require('inherits');\n\nvar errors = require('./errors');\n\nfunction AlgoliaSearch() {\n  AlgoliaSearchCore.apply(this, arguments);\n}\n\ninherits(AlgoliaSearch, AlgoliaSearchCore);\n/*\n * Delete an index\n *\n * @param indexName the name of index to delete\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\n\nAlgoliaSearch.prototype.deleteIndex = function (indexName, callback) {\n  return this._jsonRequest({\n    method: 'DELETE',\n    url: '/1/indexes/' + encodeURIComponent(indexName),\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * Move an existing index.\n * @param srcIndexName the name of index to copy.\n * @param dstIndexName the new index name that will contains a copy of\n * srcIndexName (destination will be overriten if it already exist).\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\n\n\nAlgoliaSearch.prototype.moveIndex = function (srcIndexName, dstIndexName, callback) {\n  var postObj = {\n    operation: 'move',\n    destination: dstIndexName\n  };\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(srcIndexName) + '/operation',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * Copy an existing index.\n * @param srcIndexName the name of index to copy.\n * @param dstIndexName the new index name that will contains a copy\n * of srcIndexName (destination will be overriten if it already exist).\n * @param scope an array of scopes to copy: ['settings', 'synonyms', 'rules']\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\n\n\nAlgoliaSearch.prototype.copyIndex = function (srcIndexName, dstIndexName, scopeOrCallback, _callback) {\n  var postObj = {\n    operation: 'copy',\n    destination: dstIndexName\n  };\n  var callback = _callback;\n\n  if (typeof scopeOrCallback === 'function') {\n    // oops, old behaviour of third argument being a function\n    callback = scopeOrCallback;\n  } else if (Array.isArray(scopeOrCallback) && scopeOrCallback.length > 0) {\n    postObj.scope = scopeOrCallback;\n  } else if (typeof scopeOrCallback !== 'undefined') {\n    throw new Error('the scope given to `copyIndex` was not an array with settings, synonyms or rules');\n  }\n\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(srcIndexName) + '/operation',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * Return last log entries.\n * @param offset Specify the first entry to retrieve (0-based, 0 is the most recent log entry).\n * @param length Specify the maximum number of entries to retrieve starting\n * at offset. Maximum allowed value: 1000.\n * @param type Specify the maximum number of entries to retrieve starting\n * at offset. Maximum allowed value: 1000.\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\n\n\nAlgoliaSearch.prototype.getLogs = function (offset, length, callback) {\n  var clone = require('./clone.js');\n\n  var params = {};\n\n  if (typeof offset === 'object') {\n    // getLogs(params)\n    params = clone(offset);\n    callback = length;\n  } else if (arguments.length === 0 || typeof offset === 'function') {\n    // getLogs([cb])\n    callback = offset;\n  } else if (arguments.length === 1 || typeof length === 'function') {\n    // getLogs(1, [cb)]\n    callback = length;\n    params.offset = offset;\n  } else {\n    // getLogs(1, 2, [cb])\n    params.offset = offset;\n    params.length = length;\n  }\n\n  if (params.offset === undefined) params.offset = 0;\n  if (params.length === undefined) params.length = 10;\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/logs?' + this._getSearchParams(params, ''),\n    hostType: 'read',\n    callback: callback\n  });\n};\n/*\n * List all existing indexes (paginated)\n *\n * @param page The page to retrieve, starting at 0.\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with index list\n */\n\n\nAlgoliaSearch.prototype.listIndexes = function (page, callback) {\n  var params = '';\n\n  if (page === undefined || typeof page === 'function') {\n    callback = page;\n  } else {\n    params = '?page=' + page;\n  }\n\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes' + params,\n    hostType: 'read',\n    callback: callback\n  });\n};\n/*\n * Get the index object initialized\n *\n * @param indexName the name of index\n * @param callback the result callback with one argument (the Index instance)\n */\n\n\nAlgoliaSearch.prototype.initIndex = function (indexName) {\n  return new Index(this, indexName);\n};\n\nAlgoliaSearch.prototype.initAnalytics = function (opts) {\n  // the actual require must be inside the function, when put outside then you have a cyclic dependency\n  // not well resolved that ends up making the main \"./index.js\" (main module, the agloliasearch function)\n  // export an object instead of a function\n  // Other workarounds:\n  // - rewrite the lib in ES6, cyclic dependencies may be better supported\n  // - move initAnalytics to a property on the main module (algoliasearch.initAnalytics),\n  // same as places.\n  // The current API was made mostly to mimic the one made in PHP\n  var createAnalyticsClient = require('./createAnalyticsClient.js');\n\n  return createAnalyticsClient(this.applicationID, this.apiKey, opts);\n};\n/*\n * @deprecated use client.listApiKeys\n */\n\n\nAlgoliaSearch.prototype.listUserKeys = deprecate(function (callback) {\n  return this.listApiKeys(callback);\n}, deprecatedMessage('client.listUserKeys()', 'client.listApiKeys()'));\n/*\n * List all existing api keys with their associated ACLs\n *\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with api keys list\n */\n\nAlgoliaSearch.prototype.listApiKeys = function (callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/keys',\n    hostType: 'read',\n    callback: callback\n  });\n};\n/*\n * @deprecated see client.getApiKey\n */\n\n\nAlgoliaSearch.prototype.getUserKeyACL = deprecate(function (key, callback) {\n  return this.getApiKey(key, callback);\n}, deprecatedMessage('client.getUserKeyACL()', 'client.getApiKey()'));\n/*\n * Get an API key\n *\n * @param key\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with the right API key\n */\n\nAlgoliaSearch.prototype.getApiKey = function (key, callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/keys/' + key,\n    hostType: 'read',\n    callback: callback\n  });\n};\n/*\n * @deprecated see client.deleteApiKey\n */\n\n\nAlgoliaSearch.prototype.deleteUserKey = deprecate(function (key, callback) {\n  return this.deleteApiKey(key, callback);\n}, deprecatedMessage('client.deleteUserKey()', 'client.deleteApiKey()'));\n/*\n * Delete an existing API key\n * @param key\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with the date of deletion\n */\n\nAlgoliaSearch.prototype.deleteApiKey = function (key, callback) {\n  return this._jsonRequest({\n    method: 'DELETE',\n    url: '/1/keys/' + key,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * Restore a deleted API key\n *\n * @param {String} key - The key to restore\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the restored API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.restoreApiKey('APIKEY')\n * @see {@link https://www.algolia.com/doc/rest-api/search/#restore-api-key|Algolia REST API Documentation}\n */\n\n\nAlgoliaSearch.prototype.restoreApiKey = function (key, callback) {\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/keys/' + key + '/restore',\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\n @deprecated see client.addApiKey\n */\n\n\nAlgoliaSearch.prototype.addUserKey = deprecate(function (acls, params, callback) {\n  return this.addApiKey(acls, params, callback);\n}, deprecatedMessage('client.addUserKey()', 'client.addApiKey()'));\n/*\n * Add a new global API key\n *\n * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n *   can contains the following values:\n *     - search: allow to search (https and http)\n *     - addObject: allows to add/update an object in the index (https only)\n *     - deleteObject : allows to delete an existing object (https only)\n *     - deleteIndex : allows to delete index content (https only)\n *     - settings : allows to get index settings (https only)\n *     - editSettings : allows to change index settings (https only)\n * @param {Object} [params] - Optionnal parameters to set for the key\n * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n * @param {string[]} params.indexes - Allowed targeted indexes for this key\n * @param {string} params.description - A description for your key\n * @param {string[]} params.referers - A list of authorized referers\n * @param {Object} params.queryParameters - Force the key to use specific query parameters\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the added API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.addApiKey(['search'], {\n *   validity: 300,\n *   maxQueriesPerIPPerHour: 2000,\n *   maxHitsPerQuery: 3,\n *   indexes: ['fruits'],\n *   description: 'Eat three fruits',\n *   referers: ['*.algolia.com'],\n *   queryParameters: {\n *     tagFilters: ['public'],\n *   }\n * })\n * @see {@link https://www.algolia.com/doc/rest_api#AddKey|Algolia REST API Documentation}\n */\n\nAlgoliaSearch.prototype.addApiKey = function (acls, params, callback) {\n  var isArray = require('isarray');\n\n  var usage = 'Usage: client.addApiKey(arrayOfAcls[, params, callback])';\n\n  if (!isArray(acls)) {\n    throw new Error(usage);\n  }\n\n  if (arguments.length === 1 || typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var postObj = {\n    acl: acls\n  };\n\n  if (params) {\n    postObj.validity = params.validity;\n    postObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\n    postObj.maxHitsPerQuery = params.maxHitsPerQuery;\n    postObj.indexes = params.indexes;\n    postObj.description = params.description;\n\n    if (params.queryParameters) {\n      postObj.queryParameters = this._getSearchParams(params.queryParameters, '');\n    }\n\n    postObj.referers = params.referers;\n  }\n\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/keys',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * @deprecated Please use client.addApiKey()\n */\n\n\nAlgoliaSearch.prototype.addUserKeyWithValidity = deprecate(function (acls, params, callback) {\n  return this.addApiKey(acls, params, callback);\n}, deprecatedMessage('client.addUserKeyWithValidity()', 'client.addApiKey()'));\n/**\n * @deprecated Please use client.updateApiKey()\n */\n\nAlgoliaSearch.prototype.updateUserKey = deprecate(function (key, acls, params, callback) {\n  return this.updateApiKey(key, acls, params, callback);\n}, deprecatedMessage('client.updateUserKey()', 'client.updateApiKey()'));\n/**\n * Update an existing API key\n * @param {string} key - The key to update\n * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n *   can contains the following values:\n *     - search: allow to search (https and http)\n *     - addObject: allows to add/update an object in the index (https only)\n *     - deleteObject : allows to delete an existing object (https only)\n *     - deleteIndex : allows to delete index content (https only)\n *     - settings : allows to get index settings (https only)\n *     - editSettings : allows to change index settings (https only)\n * @param {Object} [params] - Optionnal parameters to set for the key\n * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n * @param {string[]} params.indexes - Allowed targeted indexes for this key\n * @param {string} params.description - A description for your key\n * @param {string[]} params.referers - A list of authorized referers\n * @param {Object} params.queryParameters - Force the key to use specific query parameters\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the modified API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.updateApiKey('APIKEY', ['search'], {\n *   validity: 300,\n *   maxQueriesPerIPPerHour: 2000,\n *   maxHitsPerQuery: 3,\n *   indexes: ['fruits'],\n *   description: 'Eat three fruits',\n *   referers: ['*.algolia.com'],\n *   queryParameters: {\n *     tagFilters: ['public'],\n *   }\n * })\n * @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}\n */\n\nAlgoliaSearch.prototype.updateApiKey = function (key, acls, params, callback) {\n  var isArray = require('isarray');\n\n  var usage = 'Usage: client.updateApiKey(key, arrayOfAcls[, params, callback])';\n\n  if (!isArray(acls)) {\n    throw new Error(usage);\n  }\n\n  if (arguments.length === 2 || typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var putObj = {\n    acl: acls\n  };\n\n  if (params) {\n    putObj.validity = params.validity;\n    putObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\n    putObj.maxHitsPerQuery = params.maxHitsPerQuery;\n    putObj.indexes = params.indexes;\n    putObj.description = params.description;\n\n    if (params.queryParameters) {\n      putObj.queryParameters = this._getSearchParams(params.queryParameters, '');\n    }\n\n    putObj.referers = params.referers;\n  }\n\n  return this._jsonRequest({\n    method: 'PUT',\n    url: '/1/keys/' + key,\n    body: putObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * Initialize a new batch of search queries\n * @deprecated use client.search()\n */\n\n\nAlgoliaSearch.prototype.startQueriesBatch = deprecate(function startQueriesBatchDeprecated() {\n  this._batch = [];\n}, deprecatedMessage('client.startQueriesBatch()', 'client.search()'));\n/**\n * Add a search query in the batch\n * @deprecated use client.search()\n */\n\nAlgoliaSearch.prototype.addQueryInBatch = deprecate(function addQueryInBatchDeprecated(indexName, query, args) {\n  this._batch.push({\n    indexName: indexName,\n    query: query,\n    params: args\n  });\n}, deprecatedMessage('client.addQueryInBatch()', 'client.search()'));\n/**\n * Launch the batch of queries using XMLHttpRequest.\n * @deprecated use client.search()\n */\n\nAlgoliaSearch.prototype.sendQueriesBatch = deprecate(function sendQueriesBatchDeprecated(callback) {\n  return this.search(this._batch, callback);\n}, deprecatedMessage('client.sendQueriesBatch()', 'client.search()'));\n/**\n * Perform write operations across multiple indexes.\n *\n * To reduce the amount of time spent on network round trips,\n * you can create, update, or delete several objects in one call,\n * using the batch endpoint (all operations are done in the given order).\n *\n * Available actions:\n *   - addObject\n *   - updateObject\n *   - partialUpdateObject\n *   - partialUpdateObjectNoCreate\n *   - deleteObject\n *\n * https://www.algolia.com/doc/rest_api#Indexes\n * @param  {Object[]} operations An array of operations to perform\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.batch([{\n *   action: 'addObject',\n *   indexName: 'clients',\n *   body: {\n *     name: 'Bill'\n *   }\n * }, {\n *   action: 'udpateObject',\n *   indexName: 'fruits',\n *   body: {\n *     objectID: '29138',\n *     name: 'banana'\n *   }\n * }], cb)\n */\n\nAlgoliaSearch.prototype.batch = function (operations, callback) {\n  var isArray = require('isarray');\n\n  var usage = 'Usage: client.batch(operations[, callback])';\n\n  if (!isArray(operations)) {\n    throw new Error(usage);\n  }\n\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/*/batch',\n    body: {\n      requests: operations\n    },\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * Assign or Move a userID to a cluster\n *\n * @param {string} data.userID The userID to assign to a new cluster\n * @param {string} data.cluster The cluster to assign the user to\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.assignUserID({ cluster: 'c1-test', userID: 'some-user' });\n */\n\n\nAlgoliaSearch.prototype.assignUserID = function (data, callback) {\n  if (!data.userID || !data.cluster) {\n    throw new errors.AlgoliaSearchError('You have to provide both a userID and cluster', data);\n  }\n\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/clusters/mapping',\n    hostType: 'write',\n    body: {\n      cluster: data.cluster\n    },\n    callback: callback,\n    headers: {\n      'x-algolia-user-id': data.userID\n    }\n  });\n};\n/**\n * Assign a array of userIDs to a cluster.\n *\n * @param {Array} data.userIDs The array of userIDs to assign to a new cluster\n * @param {string} data.cluster The cluster to assign the user to\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.assignUserIDs({ cluster: 'c1-test', userIDs: ['some-user-1', 'some-user-2'] });\n */\n\n\nAlgoliaSearch.prototype.assignUserIDs = function (data, callback) {\n  if (!data.userIDs || !data.cluster) {\n    throw new errors.AlgoliaSearchError('You have to provide both an array of userIDs and cluster', data);\n  }\n\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/clusters/mapping/batch',\n    hostType: 'write',\n    body: {\n      cluster: data.cluster,\n      users: data.userIDs\n    },\n    callback: callback\n  });\n};\n/**\n * Get the top userIDs\n *\n * (the callback is the second argument)\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getTopUserID();\n */\n\n\nAlgoliaSearch.prototype.getTopUserID = function (callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters/mapping/top',\n    hostType: 'read',\n    callback: callback\n  });\n};\n/**\n * Get userID\n *\n * @param {string} data.userID The userID to get info about\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getUserID({ userID: 'some-user' });\n */\n\n\nAlgoliaSearch.prototype.getUserID = function (data, callback) {\n  if (!data.userID) {\n    throw new errors.AlgoliaSearchError('You have to provide a userID', {\n      debugData: data\n    });\n  }\n\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters/mapping/' + data.userID,\n    hostType: 'read',\n    callback: callback\n  });\n};\n/**\n * List all the clusters\n *\n * (the callback is the second argument)\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.listClusters();\n */\n\n\nAlgoliaSearch.prototype.listClusters = function (callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters',\n    hostType: 'read',\n    callback: callback\n  });\n};\n/**\n * List the userIDs\n *\n * (the callback is the second argument)\n *\n * @param {string} data.hitsPerPage How many hits on every page\n * @param {string} data.page The page to retrieve\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.listClusters();\n * client.listClusters({ page: 3, hitsPerPage: 30});\n */\n\n\nAlgoliaSearch.prototype.listUserIDs = function (data, callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters/mapping',\n    body: data,\n    hostType: 'read',\n    callback: callback\n  });\n};\n/**\n * Remove an userID\n *\n * @param {string} data.userID The userID to assign to a new cluster\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.removeUserID({ userID: 'some-user' });\n */\n\n\nAlgoliaSearch.prototype.removeUserID = function (data, callback) {\n  if (!data.userID) {\n    throw new errors.AlgoliaSearchError('You have to provide a userID', {\n      debugData: data\n    });\n  }\n\n  return this._jsonRequest({\n    method: 'DELETE',\n    url: '/1/clusters/mapping',\n    hostType: 'write',\n    callback: callback,\n    headers: {\n      'x-algolia-user-id': data.userID\n    }\n  });\n};\n/**\n * Search for userIDs\n *\n * @param {string} data.cluster The cluster to target\n * @param {string} data.query The query to execute\n * @param {string} data.hitsPerPage How many hits on every page\n * @param {string} data.page The page to retrieve\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.searchUserIDs({ cluster: 'c1-test', query: 'some-user' });\n * client.searchUserIDs({\n *   cluster: \"c1-test\",\n *   query: \"some-user\",\n *   page: 3,\n *   hitsPerPage: 2\n * });\n */\n\n\nAlgoliaSearch.prototype.searchUserIDs = function (data, callback) {\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/clusters/mapping/search',\n    body: data,\n    hostType: 'read',\n    callback: callback\n  });\n};\n/**\n * Set strategy for personalization\n *\n * @param {Object} data\n * @param {Object} data.eventsScoring Associate a score to an event\n * @param {Object} data.eventsScoring.<eventName> The name of the event\n * @param {Number} data.eventsScoring.<eventName>.score The score to associate to <eventName>\n * @param {String} data.eventsScoring.<eventName>.type Either \"click\", \"conversion\" or \"view\"\n * @param {Object} data.facetsScoring Associate a score to a facet\n * @param {Object} data.facetsScoring.<facetName> The name of the facet\n * @param {Number} data.facetsScoring.<facetName>.score The score to associate to <facetName>\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.setPersonalizationStrategy({\n *   eventsScoring: {\n *      \"Add to cart\": { score: 50, type: \"conversion\" },\n *      Purchase: { score: 100, type: \"conversion\" }\n *   },\n *   facetsScoring: {\n *      brand: { score: 100 },\n *      categories: { score: 10 }\n *   }\n * });\n */\n\n\nAlgoliaSearch.prototype.setPersonalizationStrategy = function (data, callback) {\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/recommendation/personalization/strategy',\n    body: data,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/**\n * Get strategy for personalization\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getPersonalizationStrategy();\n */\n\n\nAlgoliaSearch.prototype.getPersonalizationStrategy = function (callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/recommendation/personalization/strategy',\n    hostType: 'read',\n    callback: callback\n  });\n}; // environment specific methods\n\n\nAlgoliaSearch.prototype.destroy = notImplemented;\nAlgoliaSearch.prototype.enableRateLimitForward = notImplemented;\nAlgoliaSearch.prototype.disableRateLimitForward = notImplemented;\nAlgoliaSearch.prototype.useSecuredAPIKey = notImplemented;\nAlgoliaSearch.prototype.disableSecuredAPIKey = notImplemented;\nAlgoliaSearch.prototype.generateSecuredApiKey = notImplemented;\nAlgoliaSearch.prototype.getSecuredApiKeyRemainingValidity = notImplemented;\n\nfunction notImplemented() {\n  var message = 'Not implemented in this environment.\\n' + 'If you feel this is a mistake, write to support@algolia.com';\n  throw new errors.AlgoliaSearchError(message);\n}","map":{"version":3,"sources":["/Users/guvenaltunsoy/Desktop/react/algolia-example/node_modules/algoliasearch/src/AlgoliaSearch.js"],"names":["module","exports","AlgoliaSearch","Index","require","deprecate","deprecatedMessage","AlgoliaSearchCore","inherits","errors","apply","arguments","prototype","deleteIndex","indexName","callback","_jsonRequest","method","url","encodeURIComponent","hostType","moveIndex","srcIndexName","dstIndexName","postObj","operation","destination","body","copyIndex","scopeOrCallback","_callback","Array","isArray","length","scope","Error","getLogs","offset","clone","params","undefined","_getSearchParams","listIndexes","page","initIndex","initAnalytics","opts","createAnalyticsClient","applicationID","apiKey","listUserKeys","listApiKeys","getUserKeyACL","key","getApiKey","deleteUserKey","deleteApiKey","restoreApiKey","addUserKey","acls","addApiKey","usage","acl","validity","maxQueriesPerIPPerHour","maxHitsPerQuery","indexes","description","queryParameters","referers","addUserKeyWithValidity","updateUserKey","updateApiKey","putObj","startQueriesBatch","startQueriesBatchDeprecated","_batch","addQueryInBatch","addQueryInBatchDeprecated","query","args","push","sendQueriesBatch","sendQueriesBatchDeprecated","search","batch","operations","requests","assignUserID","data","userID","cluster","AlgoliaSearchError","headers","assignUserIDs","userIDs","users","getTopUserID","getUserID","debugData","listClusters","listUserIDs","removeUserID","searchUserIDs","setPersonalizationStrategy","getPersonalizationStrategy","destroy","notImplemented","enableRateLimitForward","disableRateLimitForward","useSecuredAPIKey","disableSecuredAPIKey","generateSecuredApiKey","getSecuredApiKeyRemainingValidity","message"],"mappings":"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","sourcesContent":["module.exports = AlgoliaSearch;\n\nvar Index = require('./Index.js');\nvar deprecate = require('./deprecate.js');\nvar deprecatedMessage = require('./deprecatedMessage.js');\nvar AlgoliaSearchCore = require('./AlgoliaSearchCore.js');\nvar inherits = require('inherits');\nvar errors = require('./errors');\n\nfunction AlgoliaSearch() {\n  AlgoliaSearchCore.apply(this, arguments);\n}\n\ninherits(AlgoliaSearch, AlgoliaSearchCore);\n\n/*\n * Delete an index\n *\n * @param indexName the name of index to delete\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\nAlgoliaSearch.prototype.deleteIndex = function(indexName, callback) {\n  return this._jsonRequest({\n    method: 'DELETE',\n    url: '/1/indexes/' + encodeURIComponent(indexName),\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * Move an existing index.\n * @param srcIndexName the name of index to copy.\n * @param dstIndexName the new index name that will contains a copy of\n * srcIndexName (destination will be overriten if it already exist).\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\nAlgoliaSearch.prototype.moveIndex = function(srcIndexName, dstIndexName, callback) {\n  var postObj = {\n    operation: 'move', destination: dstIndexName\n  };\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(srcIndexName) + '/operation',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * Copy an existing index.\n * @param srcIndexName the name of index to copy.\n * @param dstIndexName the new index name that will contains a copy\n * of srcIndexName (destination will be overriten if it already exist).\n * @param scope an array of scopes to copy: ['settings', 'synonyms', 'rules']\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\nAlgoliaSearch.prototype.copyIndex = function(srcIndexName, dstIndexName, scopeOrCallback, _callback) {\n  var postObj = {\n    operation: 'copy',\n    destination: dstIndexName\n  };\n  var callback = _callback;\n  if (typeof scopeOrCallback === 'function') {\n    // oops, old behaviour of third argument being a function\n    callback = scopeOrCallback;\n  } else if (Array.isArray(scopeOrCallback) && scopeOrCallback.length > 0) {\n    postObj.scope = scopeOrCallback;\n  } else if (typeof scopeOrCallback !== 'undefined') {\n    throw new Error('the scope given to `copyIndex` was not an array with settings, synonyms or rules');\n  }\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(srcIndexName) + '/operation',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * Return last log entries.\n * @param offset Specify the first entry to retrieve (0-based, 0 is the most recent log entry).\n * @param length Specify the maximum number of entries to retrieve starting\n * at offset. Maximum allowed value: 1000.\n * @param type Specify the maximum number of entries to retrieve starting\n * at offset. Maximum allowed value: 1000.\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer that contains the task ID\n */\nAlgoliaSearch.prototype.getLogs = function(offset, length, callback) {\n  var clone = require('./clone.js');\n  var params = {};\n  if (typeof offset === 'object') {\n    // getLogs(params)\n    params = clone(offset);\n    callback = length;\n  } else if (arguments.length === 0 || typeof offset === 'function') {\n    // getLogs([cb])\n    callback = offset;\n  } else if (arguments.length === 1 || typeof length === 'function') {\n    // getLogs(1, [cb)]\n    callback = length;\n    params.offset = offset;\n  } else {\n    // getLogs(1, 2, [cb])\n    params.offset = offset;\n    params.length = length;\n  }\n\n  if (params.offset === undefined) params.offset = 0;\n  if (params.length === undefined) params.length = 10;\n\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/logs?' + this._getSearchParams(params, ''),\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/*\n * List all existing indexes (paginated)\n *\n * @param page The page to retrieve, starting at 0.\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with index list\n */\nAlgoliaSearch.prototype.listIndexes = function(page, callback) {\n  var params = '';\n\n  if (page === undefined || typeof page === 'function') {\n    callback = page;\n  } else {\n    params = '?page=' + page;\n  }\n\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes' + params,\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/*\n * Get the index object initialized\n *\n * @param indexName the name of index\n * @param callback the result callback with one argument (the Index instance)\n */\nAlgoliaSearch.prototype.initIndex = function(indexName) {\n  return new Index(this, indexName);\n};\n\nAlgoliaSearch.prototype.initAnalytics = function(opts) {\n  // the actual require must be inside the function, when put outside then you have a cyclic dependency\n  // not well resolved that ends up making the main \"./index.js\" (main module, the agloliasearch function)\n  // export an object instead of a function\n  // Other workarounds:\n  // - rewrite the lib in ES6, cyclic dependencies may be better supported\n  // - move initAnalytics to a property on the main module (algoliasearch.initAnalytics),\n  // same as places.\n  // The current API was made mostly to mimic the one made in PHP\n  var createAnalyticsClient = require('./createAnalyticsClient.js');\n  return createAnalyticsClient(this.applicationID, this.apiKey, opts);\n};\n\n/*\n * @deprecated use client.listApiKeys\n */\nAlgoliaSearch.prototype.listUserKeys = deprecate(function(callback) {\n  return this.listApiKeys(callback);\n}, deprecatedMessage('client.listUserKeys()', 'client.listApiKeys()'));\n\n/*\n * List all existing api keys with their associated ACLs\n *\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with api keys list\n */\nAlgoliaSearch.prototype.listApiKeys = function(callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/keys',\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/*\n * @deprecated see client.getApiKey\n */\nAlgoliaSearch.prototype.getUserKeyACL = deprecate(function(key, callback) {\n  return this.getApiKey(key, callback);\n}, deprecatedMessage('client.getUserKeyACL()', 'client.getApiKey()'));\n\n/*\n * Get an API key\n *\n * @param key\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with the right API key\n */\nAlgoliaSearch.prototype.getApiKey = function(key, callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/keys/' + key,\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/*\n * @deprecated see client.deleteApiKey\n */\nAlgoliaSearch.prototype.deleteUserKey = deprecate(function(key, callback) {\n  return this.deleteApiKey(key, callback);\n}, deprecatedMessage('client.deleteUserKey()', 'client.deleteApiKey()'));\n\n/*\n * Delete an existing API key\n * @param key\n * @param callback the result callback called with two arguments\n *  error: null or Error('message')\n *  content: the server answer with the date of deletion\n */\nAlgoliaSearch.prototype.deleteApiKey = function(key, callback) {\n  return this._jsonRequest({\n    method: 'DELETE',\n    url: '/1/keys/' + key,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * Restore a deleted API key\n *\n * @param {String} key - The key to restore\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the restored API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.restoreApiKey('APIKEY')\n * @see {@link https://www.algolia.com/doc/rest-api/search/#restore-api-key|Algolia REST API Documentation}\n */\nAlgoliaSearch.prototype.restoreApiKey = function(key, callback) {\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/keys/' + key + '/restore',\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/*\n @deprecated see client.addApiKey\n */\nAlgoliaSearch.prototype.addUserKey = deprecate(function(acls, params, callback) {\n  return this.addApiKey(acls, params, callback);\n}, deprecatedMessage('client.addUserKey()', 'client.addApiKey()'));\n\n/*\n * Add a new global API key\n *\n * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n *   can contains the following values:\n *     - search: allow to search (https and http)\n *     - addObject: allows to add/update an object in the index (https only)\n *     - deleteObject : allows to delete an existing object (https only)\n *     - deleteIndex : allows to delete index content (https only)\n *     - settings : allows to get index settings (https only)\n *     - editSettings : allows to change index settings (https only)\n * @param {Object} [params] - Optionnal parameters to set for the key\n * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n * @param {string[]} params.indexes - Allowed targeted indexes for this key\n * @param {string} params.description - A description for your key\n * @param {string[]} params.referers - A list of authorized referers\n * @param {Object} params.queryParameters - Force the key to use specific query parameters\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the added API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.addApiKey(['search'], {\n *   validity: 300,\n *   maxQueriesPerIPPerHour: 2000,\n *   maxHitsPerQuery: 3,\n *   indexes: ['fruits'],\n *   description: 'Eat three fruits',\n *   referers: ['*.algolia.com'],\n *   queryParameters: {\n *     tagFilters: ['public'],\n *   }\n * })\n * @see {@link https://www.algolia.com/doc/rest_api#AddKey|Algolia REST API Documentation}\n */\nAlgoliaSearch.prototype.addApiKey = function(acls, params, callback) {\n  var isArray = require('isarray');\n  var usage = 'Usage: client.addApiKey(arrayOfAcls[, params, callback])';\n\n  if (!isArray(acls)) {\n    throw new Error(usage);\n  }\n\n  if (arguments.length === 1 || typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var postObj = {\n    acl: acls\n  };\n\n  if (params) {\n    postObj.validity = params.validity;\n    postObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\n    postObj.maxHitsPerQuery = params.maxHitsPerQuery;\n    postObj.indexes = params.indexes;\n    postObj.description = params.description;\n\n    if (params.queryParameters) {\n      postObj.queryParameters = this._getSearchParams(params.queryParameters, '');\n    }\n\n    postObj.referers = params.referers;\n  }\n\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/keys',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * @deprecated Please use client.addApiKey()\n */\nAlgoliaSearch.prototype.addUserKeyWithValidity = deprecate(function(acls, params, callback) {\n  return this.addApiKey(acls, params, callback);\n}, deprecatedMessage('client.addUserKeyWithValidity()', 'client.addApiKey()'));\n\n/**\n * @deprecated Please use client.updateApiKey()\n */\nAlgoliaSearch.prototype.updateUserKey = deprecate(function(key, acls, params, callback) {\n  return this.updateApiKey(key, acls, params, callback);\n}, deprecatedMessage('client.updateUserKey()', 'client.updateApiKey()'));\n\n/**\n * Update an existing API key\n * @param {string} key - The key to update\n * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\n *   can contains the following values:\n *     - search: allow to search (https and http)\n *     - addObject: allows to add/update an object in the index (https only)\n *     - deleteObject : allows to delete an existing object (https only)\n *     - deleteIndex : allows to delete index content (https only)\n *     - settings : allows to get index settings (https only)\n *     - editSettings : allows to change index settings (https only)\n * @param {Object} [params] - Optionnal parameters to set for the key\n * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\n * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\n * @param {string[]} params.indexes - Allowed targeted indexes for this key\n * @param {string} params.description - A description for your key\n * @param {string[]} params.referers - A list of authorized referers\n * @param {Object} params.queryParameters - Force the key to use specific query parameters\n * @param {Function} callback - The result callback called with two arguments\n *   error: null or Error('message')\n *   content: the server answer with the modified API key\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.updateApiKey('APIKEY', ['search'], {\n *   validity: 300,\n *   maxQueriesPerIPPerHour: 2000,\n *   maxHitsPerQuery: 3,\n *   indexes: ['fruits'],\n *   description: 'Eat three fruits',\n *   referers: ['*.algolia.com'],\n *   queryParameters: {\n *     tagFilters: ['public'],\n *   }\n * })\n * @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}\n */\nAlgoliaSearch.prototype.updateApiKey = function(key, acls, params, callback) {\n  var isArray = require('isarray');\n  var usage = 'Usage: client.updateApiKey(key, arrayOfAcls[, params, callback])';\n\n  if (!isArray(acls)) {\n    throw new Error(usage);\n  }\n\n  if (arguments.length === 2 || typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var putObj = {\n    acl: acls\n  };\n\n  if (params) {\n    putObj.validity = params.validity;\n    putObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\n    putObj.maxHitsPerQuery = params.maxHitsPerQuery;\n    putObj.indexes = params.indexes;\n    putObj.description = params.description;\n\n    if (params.queryParameters) {\n      putObj.queryParameters = this._getSearchParams(params.queryParameters, '');\n    }\n\n    putObj.referers = params.referers;\n  }\n\n  return this._jsonRequest({\n    method: 'PUT',\n    url: '/1/keys/' + key,\n    body: putObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * Initialize a new batch of search queries\n * @deprecated use client.search()\n */\nAlgoliaSearch.prototype.startQueriesBatch = deprecate(function startQueriesBatchDeprecated() {\n  this._batch = [];\n}, deprecatedMessage('client.startQueriesBatch()', 'client.search()'));\n\n/**\n * Add a search query in the batch\n * @deprecated use client.search()\n */\nAlgoliaSearch.prototype.addQueryInBatch = deprecate(function addQueryInBatchDeprecated(indexName, query, args) {\n  this._batch.push({\n    indexName: indexName,\n    query: query,\n    params: args\n  });\n}, deprecatedMessage('client.addQueryInBatch()', 'client.search()'));\n\n/**\n * Launch the batch of queries using XMLHttpRequest.\n * @deprecated use client.search()\n */\nAlgoliaSearch.prototype.sendQueriesBatch = deprecate(function sendQueriesBatchDeprecated(callback) {\n  return this.search(this._batch, callback);\n}, deprecatedMessage('client.sendQueriesBatch()', 'client.search()'));\n\n/**\n * Perform write operations across multiple indexes.\n *\n * To reduce the amount of time spent on network round trips,\n * you can create, update, or delete several objects in one call,\n * using the batch endpoint (all operations are done in the given order).\n *\n * Available actions:\n *   - addObject\n *   - updateObject\n *   - partialUpdateObject\n *   - partialUpdateObjectNoCreate\n *   - deleteObject\n *\n * https://www.algolia.com/doc/rest_api#Indexes\n * @param  {Object[]} operations An array of operations to perform\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.batch([{\n *   action: 'addObject',\n *   indexName: 'clients',\n *   body: {\n *     name: 'Bill'\n *   }\n * }, {\n *   action: 'udpateObject',\n *   indexName: 'fruits',\n *   body: {\n *     objectID: '29138',\n *     name: 'banana'\n *   }\n * }], cb)\n */\nAlgoliaSearch.prototype.batch = function(operations, callback) {\n  var isArray = require('isarray');\n  var usage = 'Usage: client.batch(operations[, callback])';\n\n  if (!isArray(operations)) {\n    throw new Error(usage);\n  }\n\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/*/batch',\n    body: {\n      requests: operations\n    },\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * Assign or Move a userID to a cluster\n *\n * @param {string} data.userID The userID to assign to a new cluster\n * @param {string} data.cluster The cluster to assign the user to\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.assignUserID({ cluster: 'c1-test', userID: 'some-user' });\n */\nAlgoliaSearch.prototype.assignUserID = function(data, callback) {\n  if (!data.userID || !data.cluster) {\n    throw new errors.AlgoliaSearchError('You have to provide both a userID and cluster', data);\n  }\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/clusters/mapping',\n    hostType: 'write',\n    body: {cluster: data.cluster},\n    callback: callback,\n    headers: {\n      'x-algolia-user-id': data.userID\n    }\n  });\n};\n\n/**\n * Assign a array of userIDs to a cluster.\n *\n * @param {Array} data.userIDs The array of userIDs to assign to a new cluster\n * @param {string} data.cluster The cluster to assign the user to\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.assignUserIDs({ cluster: 'c1-test', userIDs: ['some-user-1', 'some-user-2'] });\n */\nAlgoliaSearch.prototype.assignUserIDs = function(data, callback) {\n  if (!data.userIDs || !data.cluster) {\n    throw new errors.AlgoliaSearchError('You have to provide both an array of userIDs and cluster', data);\n  }\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/clusters/mapping/batch',\n    hostType: 'write',\n    body: {\n      cluster: data.cluster,\n      users: data.userIDs\n    },\n    callback: callback\n  });\n};\n\n/**\n * Get the top userIDs\n *\n * (the callback is the second argument)\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getTopUserID();\n */\nAlgoliaSearch.prototype.getTopUserID = function(callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters/mapping/top',\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/**\n * Get userID\n *\n * @param {string} data.userID The userID to get info about\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getUserID({ userID: 'some-user' });\n */\nAlgoliaSearch.prototype.getUserID = function(data, callback) {\n  if (!data.userID) {\n    throw new errors.AlgoliaSearchError('You have to provide a userID', {debugData: data});\n  }\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters/mapping/' + data.userID,\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/**\n * List all the clusters\n *\n * (the callback is the second argument)\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.listClusters();\n */\nAlgoliaSearch.prototype.listClusters = function(callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters',\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/**\n * List the userIDs\n *\n * (the callback is the second argument)\n *\n * @param {string} data.hitsPerPage How many hits on every page\n * @param {string} data.page The page to retrieve\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.listClusters();\n * client.listClusters({ page: 3, hitsPerPage: 30});\n */\nAlgoliaSearch.prototype.listUserIDs = function(data, callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/clusters/mapping',\n    body: data,\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/**\n * Remove an userID\n *\n * @param {string} data.userID The userID to assign to a new cluster\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.removeUserID({ userID: 'some-user' });\n */\nAlgoliaSearch.prototype.removeUserID = function(data, callback) {\n  if (!data.userID) {\n    throw new errors.AlgoliaSearchError('You have to provide a userID', {debugData: data});\n  }\n  return this._jsonRequest({\n    method: 'DELETE',\n    url: '/1/clusters/mapping',\n    hostType: 'write',\n    callback: callback,\n    headers: {\n      'x-algolia-user-id': data.userID\n    }\n  });\n};\n\n/**\n * Search for userIDs\n *\n * @param {string} data.cluster The cluster to target\n * @param {string} data.query The query to execute\n * @param {string} data.hitsPerPage How many hits on every page\n * @param {string} data.page The page to retrieve\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.searchUserIDs({ cluster: 'c1-test', query: 'some-user' });\n * client.searchUserIDs({\n *   cluster: \"c1-test\",\n *   query: \"some-user\",\n *   page: 3,\n *   hitsPerPage: 2\n * });\n */\nAlgoliaSearch.prototype.searchUserIDs = function(data, callback) {\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/clusters/mapping/search',\n    body: data,\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n/**\n * Set strategy for personalization\n *\n * @param {Object} data\n * @param {Object} data.eventsScoring Associate a score to an event\n * @param {Object} data.eventsScoring.<eventName> The name of the event\n * @param {Number} data.eventsScoring.<eventName>.score The score to associate to <eventName>\n * @param {String} data.eventsScoring.<eventName>.type Either \"click\", \"conversion\" or \"view\"\n * @param {Object} data.facetsScoring Associate a score to a facet\n * @param {Object} data.facetsScoring.<facetName> The name of the facet\n * @param {Number} data.facetsScoring.<facetName>.score The score to associate to <facetName>\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.setPersonalizationStrategy({\n *   eventsScoring: {\n *      \"Add to cart\": { score: 50, type: \"conversion\" },\n *      Purchase: { score: 100, type: \"conversion\" }\n *   },\n *   facetsScoring: {\n *      brand: { score: 100 },\n *      categories: { score: 10 }\n *   }\n * });\n */\nAlgoliaSearch.prototype.setPersonalizationStrategy = function(data, callback) {\n  return this._jsonRequest({\n    method: 'POST',\n    url: '/1/recommendation/personalization/strategy',\n    body: data,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\n/**\n * Get strategy for personalization\n *\n * @return {Promise|undefined} Returns a promise if no callback given\n * @example\n * client.getPersonalizationStrategy();\n */\n\nAlgoliaSearch.prototype.getPersonalizationStrategy = function(callback) {\n  return this._jsonRequest({\n    method: 'GET',\n    url: '/1/recommendation/personalization/strategy',\n    hostType: 'read',\n    callback: callback\n  });\n};\n\n// environment specific methods\nAlgoliaSearch.prototype.destroy = notImplemented;\nAlgoliaSearch.prototype.enableRateLimitForward = notImplemented;\nAlgoliaSearch.prototype.disableRateLimitForward = notImplemented;\nAlgoliaSearch.prototype.useSecuredAPIKey = notImplemented;\nAlgoliaSearch.prototype.disableSecuredAPIKey = notImplemented;\nAlgoliaSearch.prototype.generateSecuredApiKey = notImplemented;\nAlgoliaSearch.prototype.getSecuredApiKeyRemainingValidity = notImplemented;\n\nfunction notImplemented() {\n  var message = 'Not implemented in this environment.\\n' +\n    'If you feel this is a mistake, write to support@algolia.com';\n\n  throw new errors.AlgoliaSearchError(message);\n}\n"]},"metadata":{},"sourceType":"script"}
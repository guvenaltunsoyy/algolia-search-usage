{"ast":null,"code":"module.exports = createAnalyticsClient;\n\nvar algoliasearch = require('../index.js');\n\nfunction createAnalyticsClient(appId, apiKey, opts) {\n  var analytics = {};\n  opts = opts || {}; // there need to be 4 hosts, like on the client, since if requests fail,\n  // the counter goes up by 1, so we need to have the same amount of hosts\n  // 4 because: -dsn, -1, -2, -3\n  // This is done because the APPID used for search will be the same for the analytics client created,\n  // and since the state of available hosts is shared by APPID globally for the module, we had issues\n  // where the hostIndex would be 1 while the array was only one entry (you got an empty host)\n\n  opts.hosts = opts.hosts || ['analytics.algolia.com', 'analytics.algolia.com', 'analytics.algolia.com', 'analytics.algolia.com'];\n  opts.protocol = opts.protocol || 'https:';\n  analytics.as = algoliasearch(appId, apiKey, opts);\n\n  analytics.getABTests = function (_params, callback) {\n    var params = params || {};\n    var offset = params.offset || 0;\n    var limit = params.limit || 10;\n    return this.as._jsonRequest({\n      method: 'GET',\n      url: '/2/abtests?offset=' + encodeURIComponent(offset) + '&limit=' + encodeURIComponent(limit),\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.getABTest = function (abTestID, callback) {\n    return this.as._jsonRequest({\n      method: 'GET',\n      url: '/2/abtests/' + encodeURIComponent(abTestID),\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.addABTest = function (abTest, callback) {\n    return this.as._jsonRequest({\n      method: 'POST',\n      url: '/2/abtests',\n      body: abTest,\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.stopABTest = function (abTestID, callback) {\n    return this.as._jsonRequest({\n      method: 'POST',\n      url: '/2/abtests/' + encodeURIComponent(abTestID) + '/stop',\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.deleteABTest = function (abTestID, callback) {\n    return this.as._jsonRequest({\n      method: 'DELETE',\n      url: '/2/abtests/' + encodeURIComponent(abTestID),\n      hostType: 'write',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.waitTask = function (indexName, taskID, callback) {\n    return this.as.initIndex(indexName).waitTask(taskID, callback);\n  };\n\n  return analytics;\n}","map":{"version":3,"sources":["/Users/guvenaltunsoy/Desktop/react/algolia-example/node_modules/algoliasearch/src/createAnalyticsClient.js"],"names":["module","exports","createAnalyticsClient","algoliasearch","require","appId","apiKey","opts","analytics","hosts","protocol","as","getABTests","_params","callback","params","offset","limit","_jsonRequest","method","url","encodeURIComponent","hostType","forceAuthHeaders","getABTest","abTestID","addABTest","abTest","body","stopABTest","deleteABTest","waitTask","indexName","taskID","initIndex"],"mappings":"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","sourcesContent":["module.exports = createAnalyticsClient;\n\nvar algoliasearch = require('../index.js');\n\nfunction createAnalyticsClient(appId, apiKey, opts) {\n  var analytics = {};\n\n  opts = opts || {};\n  // there need to be 4 hosts, like on the client, since if requests fail,\n  // the counter goes up by 1, so we need to have the same amount of hosts\n  // 4 because: -dsn, -1, -2, -3\n  // This is done because the APPID used for search will be the same for the analytics client created,\n  // and since the state of available hosts is shared by APPID globally for the module, we had issues\n  // where the hostIndex would be 1 while the array was only one entry (you got an empty host)\n  opts.hosts = opts.hosts || [\n    'analytics.algolia.com',\n    'analytics.algolia.com',\n    'analytics.algolia.com',\n    'analytics.algolia.com'\n  ];\n  opts.protocol = opts.protocol || 'https:';\n\n  analytics.as = algoliasearch(appId, apiKey, opts);\n\n  analytics.getABTests = function(_params, callback) {\n    var params = params || {};\n    var offset = params.offset || 0;\n    var limit = params.limit || 10;\n\n    return this.as._jsonRequest({\n      method: 'GET',\n      url: '/2/abtests?offset=' + encodeURIComponent(offset) + '&limit=' + encodeURIComponent(limit),\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.getABTest = function(abTestID, callback) {\n    return this.as._jsonRequest({\n      method: 'GET',\n      url: '/2/abtests/' + encodeURIComponent(abTestID),\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.addABTest = function(abTest, callback) {\n    return this.as._jsonRequest({\n      method: 'POST',\n      url: '/2/abtests',\n      body: abTest,\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.stopABTest = function(abTestID, callback) {\n    return this.as._jsonRequest({\n      method: 'POST',\n      url: '/2/abtests/' + encodeURIComponent(abTestID) + '/stop',\n      hostType: 'read',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.deleteABTest = function(abTestID, callback) {\n    return this.as._jsonRequest({\n      method: 'DELETE',\n      url: '/2/abtests/' + encodeURIComponent(abTestID),\n      hostType: 'write',\n      forceAuthHeaders: true,\n      callback: callback\n    });\n  };\n\n  analytics.waitTask = function(indexName, taskID, callback) {\n    return this.as.initIndex(indexName).waitTask(taskID, callback);\n  };\n\n  return analytics;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var debug = require('debug')('algoliasearch:src/hostIndexState.js');\n\nvar localStorageNamespace = 'algoliasearch-client-js';\nvar store;\nvar moduleStore = {\n  state: {},\n  set: function set(key, data) {\n    this.state[key] = data;\n    return this.state[key];\n  },\n  get: function get(key) {\n    return this.state[key] || null;\n  }\n};\nvar localStorageStore = {\n  set: function set(key, data) {\n    moduleStore.set(key, data); // always replicate localStorageStore to moduleStore in case of failure\n\n    try {\n      var namespace = JSON.parse(global.localStorage[localStorageNamespace]);\n      namespace[key] = data;\n      global.localStorage[localStorageNamespace] = JSON.stringify(namespace);\n      return namespace[key];\n    } catch (e) {\n      return localStorageFailure(key, e);\n    }\n  },\n  get: function get(key) {\n    try {\n      return JSON.parse(global.localStorage[localStorageNamespace])[key] || null;\n    } catch (e) {\n      return localStorageFailure(key, e);\n    }\n  }\n};\n\nfunction localStorageFailure(key, e) {\n  debug('localStorage failed with', e);\n  cleanup();\n  store = moduleStore;\n  return store.get(key);\n}\n\nstore = supportsLocalStorage() ? localStorageStore : moduleStore;\nmodule.exports = {\n  get: getOrSet,\n  set: getOrSet,\n  supportsLocalStorage: supportsLocalStorage\n};\n\nfunction getOrSet(key, data) {\n  if (arguments.length === 1) {\n    return store.get(key);\n  }\n\n  return store.set(key, data);\n}\n\nfunction supportsLocalStorage() {\n  try {\n    if ('localStorage' in global && global.localStorage !== null) {\n      if (!global.localStorage[localStorageNamespace]) {\n        // actual creation of the namespace\n        global.localStorage.setItem(localStorageNamespace, JSON.stringify({}));\n      }\n\n      return true;\n    }\n\n    return false;\n  } catch (_) {\n    return false;\n  }\n} // In case of any error on localStorage, we clean our own namespace, this should handle\n// quota errors when a lot of keys + data are used\n\n\nfunction cleanup() {\n  try {\n    global.localStorage.removeItem(localStorageNamespace);\n  } catch (_) {// nothing to do\n  }\n}","map":{"version":3,"sources":["/Users/guvenaltunsoy/Desktop/react/algolia-example/node_modules/algoliasearch/src/store.js"],"names":["debug","require","localStorageNamespace","store","moduleStore","state","set","key","data","get","localStorageStore","namespace","JSON","parse","global","localStorage","stringify","e","localStorageFailure","cleanup","supportsLocalStorage","module","exports","getOrSet","arguments","length","setItem","_","removeItem"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,qCAAjB,CAAZ;;AACA,IAAIC,qBAAqB,GAAG,yBAA5B;AAEA,IAAIC,KAAJ;AACA,IAAIC,WAAW,GAAG;AAChBC,EAAAA,KAAK,EAAE,EADS;AAEhBC,EAAAA,GAAG,EAAE,aAASC,GAAT,EAAcC,IAAd,EAAoB;AACvB,SAAKH,KAAL,CAAWE,GAAX,IAAkBC,IAAlB;AACA,WAAO,KAAKH,KAAL,CAAWE,GAAX,CAAP;AACD,GALe;AAMhBE,EAAAA,GAAG,EAAE,aAASF,GAAT,EAAc;AACjB,WAAO,KAAKF,KAAL,CAAWE,GAAX,KAAmB,IAA1B;AACD;AARe,CAAlB;AAWA,IAAIG,iBAAiB,GAAG;AACtBJ,EAAAA,GAAG,EAAE,aAASC,GAAT,EAAcC,IAAd,EAAoB;AACvBJ,IAAAA,WAAW,CAACE,GAAZ,CAAgBC,GAAhB,EAAqBC,IAArB,EADuB,CACK;;AAE5B,QAAI;AACF,UAAIG,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBb,qBAApB,CAAX,CAAhB;AACAS,MAAAA,SAAS,CAACJ,GAAD,CAAT,GAAiBC,IAAjB;AACAM,MAAAA,MAAM,CAACC,YAAP,CAAoBb,qBAApB,IAA6CU,IAAI,CAACI,SAAL,CAAeL,SAAf,CAA7C;AACA,aAAOA,SAAS,CAACJ,GAAD,CAAhB;AACD,KALD,CAKE,OAAOU,CAAP,EAAU;AACV,aAAOC,mBAAmB,CAACX,GAAD,EAAMU,CAAN,CAA1B;AACD;AACF,GAZqB;AAatBR,EAAAA,GAAG,EAAE,aAASF,GAAT,EAAc;AACjB,QAAI;AACF,aAAOK,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBb,qBAApB,CAAX,EAAuDK,GAAvD,KAA+D,IAAtE;AACD,KAFD,CAEE,OAAOU,CAAP,EAAU;AACV,aAAOC,mBAAmB,CAACX,GAAD,EAAMU,CAAN,CAA1B;AACD;AACF;AAnBqB,CAAxB;;AAsBA,SAASC,mBAAT,CAA6BX,GAA7B,EAAkCU,CAAlC,EAAqC;AACnCjB,EAAAA,KAAK,CAAC,0BAAD,EAA6BiB,CAA7B,CAAL;AACAE,EAAAA,OAAO;AACPhB,EAAAA,KAAK,GAAGC,WAAR;AACA,SAAOD,KAAK,CAACM,GAAN,CAAUF,GAAV,CAAP;AACD;;AAEDJ,KAAK,GAAGiB,oBAAoB,KAAKV,iBAAL,GAAyBN,WAArD;AAEAiB,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,GAAG,EAAEc,QADU;AAEfjB,EAAAA,GAAG,EAAEiB,QAFU;AAGfH,EAAAA,oBAAoB,EAAEA;AAHP,CAAjB;;AAMA,SAASG,QAAT,CAAkBhB,GAAlB,EAAuBC,IAAvB,EAA6B;AAC3B,MAAIgB,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAOtB,KAAK,CAACM,GAAN,CAAUF,GAAV,CAAP;AACD;;AAED,SAAOJ,KAAK,CAACG,GAAN,CAAUC,GAAV,EAAeC,IAAf,CAAP;AACD;;AAED,SAASY,oBAAT,GAAgC;AAC9B,MAAI;AACF,QAAI,kBAAkBN,MAAlB,IACFA,MAAM,CAACC,YAAP,KAAwB,IAD1B,EACgC;AAC9B,UAAI,CAACD,MAAM,CAACC,YAAP,CAAoBb,qBAApB,CAAL,EAAiD;AAC/C;AACAY,QAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BxB,qBAA5B,EAAmDU,IAAI,CAACI,SAAL,CAAe,EAAf,CAAnD;AACD;;AACD,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAXD,CAWE,OAAOW,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,C,CAED;AACA;;;AACA,SAASR,OAAT,GAAmB;AACjB,MAAI;AACFL,IAAAA,MAAM,CAACC,YAAP,CAAoBa,UAApB,CAA+B1B,qBAA/B;AACD,GAFD,CAEE,OAAOyB,CAAP,EAAU,CACV;AACD;AACF","sourcesContent":["var debug = require('debug')('algoliasearch:src/hostIndexState.js');\nvar localStorageNamespace = 'algoliasearch-client-js';\n\nvar store;\nvar moduleStore = {\n  state: {},\n  set: function(key, data) {\n    this.state[key] = data;\n    return this.state[key];\n  },\n  get: function(key) {\n    return this.state[key] || null;\n  }\n};\n\nvar localStorageStore = {\n  set: function(key, data) {\n    moduleStore.set(key, data); // always replicate localStorageStore to moduleStore in case of failure\n\n    try {\n      var namespace = JSON.parse(global.localStorage[localStorageNamespace]);\n      namespace[key] = data;\n      global.localStorage[localStorageNamespace] = JSON.stringify(namespace);\n      return namespace[key];\n    } catch (e) {\n      return localStorageFailure(key, e);\n    }\n  },\n  get: function(key) {\n    try {\n      return JSON.parse(global.localStorage[localStorageNamespace])[key] || null;\n    } catch (e) {\n      return localStorageFailure(key, e);\n    }\n  }\n};\n\nfunction localStorageFailure(key, e) {\n  debug('localStorage failed with', e);\n  cleanup();\n  store = moduleStore;\n  return store.get(key);\n}\n\nstore = supportsLocalStorage() ? localStorageStore : moduleStore;\n\nmodule.exports = {\n  get: getOrSet,\n  set: getOrSet,\n  supportsLocalStorage: supportsLocalStorage\n};\n\nfunction getOrSet(key, data) {\n  if (arguments.length === 1) {\n    return store.get(key);\n  }\n\n  return store.set(key, data);\n}\n\nfunction supportsLocalStorage() {\n  try {\n    if ('localStorage' in global &&\n      global.localStorage !== null) {\n      if (!global.localStorage[localStorageNamespace]) {\n        // actual creation of the namespace\n        global.localStorage.setItem(localStorageNamespace, JSON.stringify({}));\n      }\n      return true;\n    }\n\n    return false;\n  } catch (_) {\n    return false;\n  }\n}\n\n// In case of any error on localStorage, we clean our own namespace, this should handle\n// quota errors when a lot of keys + data are used\nfunction cleanup() {\n  try {\n    global.localStorage.removeItem(localStorageNamespace);\n  } catch (_) {\n    // nothing to do\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
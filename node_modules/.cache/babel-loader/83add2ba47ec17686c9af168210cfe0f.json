{"ast":null,"code":"'use strict';\n\nvar global = require('global');\n\nvar Promise = global.Promise || require('es6-promise').Promise; // This is the standalone browser build entry point\n// Browser implementation of the Algolia Search JavaScript client,\n// using XMLHttpRequest, XDomainRequest and JSONP as fallback\n\n\nmodule.exports = function createAlgoliasearch(AlgoliaSearch, uaSuffix) {\n  var inherits = require('inherits');\n\n  var errors = require('../errors');\n\n  var inlineHeaders = require('./inline-headers');\n\n  var jsonpRequest = require('./jsonp-request');\n\n  var places = require('../places.js');\n\n  uaSuffix = uaSuffix || '';\n\n  if (process.env.NODE_ENV === 'debug') {\n    require('debug').enable('algoliasearch*');\n  }\n\n  function algoliasearch(applicationID, apiKey, opts) {\n    var cloneDeep = require('../clone.js');\n\n    opts = cloneDeep(opts || {});\n    opts._ua = opts._ua || algoliasearch.ua;\n    return new AlgoliaSearchBrowser(applicationID, apiKey, opts);\n  }\n\n  algoliasearch.version = require('../version.js');\n  algoliasearch.ua = 'Algolia for JavaScript (' + algoliasearch.version + '); ' + uaSuffix;\n  algoliasearch.initPlaces = places(algoliasearch); // we expose into window no matter how we are used, this will allow\n  // us to easily debug any website running algolia\n\n  global.__algolia = {\n    debug: require('debug'),\n    algoliasearch: algoliasearch\n  };\n  var support = {\n    hasXMLHttpRequest: 'XMLHttpRequest' in global,\n    hasXDomainRequest: 'XDomainRequest' in global\n  };\n\n  if (support.hasXMLHttpRequest) {\n    support.cors = 'withCredentials' in new XMLHttpRequest();\n  }\n\n  function AlgoliaSearchBrowser() {\n    // call AlgoliaSearch constructor\n    AlgoliaSearch.apply(this, arguments);\n  }\n\n  inherits(AlgoliaSearchBrowser, AlgoliaSearch);\n\n  AlgoliaSearchBrowser.prototype._request = function request(url, opts) {\n    return new Promise(function wrapRequest(resolve, reject) {\n      // no cors or XDomainRequest, no request\n      if (!support.cors && !support.hasXDomainRequest) {\n        // very old browser, not supported\n        reject(new errors.Network('CORS not supported'));\n        return;\n      }\n\n      url = inlineHeaders(url, opts.headers);\n      var body = opts.body;\n      var req = support.cors ? new XMLHttpRequest() : new XDomainRequest();\n      var reqTimeout;\n      var timedOut;\n      var connected = false;\n      reqTimeout = setTimeout(onTimeout, opts.timeouts.connect); // we set an empty onprogress listener\n      // so that XDomainRequest on IE9 is not aborted\n      // refs:\n      //  - https://github.com/algolia/algoliasearch-client-js/issues/76\n      //  - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n\n      req.onprogress = onProgress;\n      if ('onreadystatechange' in req) req.onreadystatechange = onReadyStateChange;\n      req.onload = onLoad;\n      req.onerror = onError; // do not rely on default XHR async flag, as some analytics code like hotjar\n      // breaks it and set it to false by default\n\n      if (req instanceof XMLHttpRequest) {\n        req.open(opts.method, url, true); // The Analytics API never accepts Auth headers as query string\n        // this option exists specifically for them.\n\n        if (opts.forceAuthHeaders) {\n          req.setRequestHeader('x-algolia-application-id', opts.headers['x-algolia-application-id']);\n          req.setRequestHeader('x-algolia-api-key', opts.headers['x-algolia-api-key']);\n        }\n      } else {\n        req.open(opts.method, url);\n      } // headers are meant to be sent after open\n\n\n      if (support.cors) {\n        if (body) {\n          if (opts.method === 'POST') {\n            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests\n            req.setRequestHeader('content-type', 'application/x-www-form-urlencoded');\n          } else {\n            req.setRequestHeader('content-type', 'application/json');\n          }\n        }\n\n        req.setRequestHeader('accept', 'application/json');\n      }\n\n      if (body) {\n        req.send(body);\n      } else {\n        req.send();\n      } // event object not received in IE8, at least\n      // but we do not use it, still important to note\n\n\n      function onLoad()\n      /* event */\n      {\n        // When browser does not supports req.timeout, we can\n        // have both a load and timeout event, since handled by a dumb setTimeout\n        if (timedOut) {\n          return;\n        }\n\n        clearTimeout(reqTimeout);\n        var out;\n\n        try {\n          out = {\n            body: JSON.parse(req.responseText),\n            responseText: req.responseText,\n            statusCode: req.status,\n            // XDomainRequest does not have any response headers\n            headers: req.getAllResponseHeaders && req.getAllResponseHeaders() || {}\n          };\n        } catch (e) {\n          out = new errors.UnparsableJSON({\n            more: req.responseText\n          });\n        }\n\n        if (out instanceof errors.UnparsableJSON) {\n          reject(out);\n        } else {\n          resolve(out);\n        }\n      }\n\n      function onError(event) {\n        if (timedOut) {\n          return;\n        }\n\n        clearTimeout(reqTimeout); // error event is trigerred both with XDR/XHR on:\n        //   - DNS error\n        //   - unallowed cross domain request\n\n        reject(new errors.Network({\n          more: event\n        }));\n      }\n\n      function onTimeout() {\n        timedOut = true;\n        req.abort();\n        reject(new errors.RequestTimeout());\n      }\n\n      function onConnect() {\n        connected = true;\n        clearTimeout(reqTimeout);\n        reqTimeout = setTimeout(onTimeout, opts.timeouts.complete);\n      }\n\n      function onProgress() {\n        if (!connected) onConnect();\n      }\n\n      function onReadyStateChange() {\n        if (!connected && req.readyState > 1) onConnect();\n      }\n    });\n  };\n\n  AlgoliaSearchBrowser.prototype._request.fallback = function requestFallback(url, opts) {\n    url = inlineHeaders(url, opts.headers);\n    return new Promise(function wrapJsonpRequest(resolve, reject) {\n      jsonpRequest(url, opts, function jsonpRequestDone(err, content) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(content);\n      });\n    });\n  };\n\n  AlgoliaSearchBrowser.prototype._promise = {\n    reject: function rejectPromise(val) {\n      return Promise.reject(val);\n    },\n    resolve: function resolvePromise(val) {\n      return Promise.resolve(val);\n    },\n    delay: function delayPromise(ms) {\n      return new Promise(function resolveOnTimeout(resolve\n      /* , reject*/\n      ) {\n        setTimeout(resolve, ms);\n      });\n    },\n    all: function all(promises) {\n      return Promise.all(promises);\n    }\n  };\n  return algoliasearch;\n};","map":{"version":3,"sources":["/Users/guvenaltunsoy/Desktop/react/algolia-example/node_modules/algoliasearch/src/browser/createAlgoliasearch.js"],"names":["global","require","Promise","module","exports","createAlgoliasearch","AlgoliaSearch","uaSuffix","inherits","errors","inlineHeaders","jsonpRequest","places","process","env","NODE_ENV","enable","algoliasearch","applicationID","apiKey","opts","cloneDeep","_ua","ua","AlgoliaSearchBrowser","version","initPlaces","__algolia","debug","support","hasXMLHttpRequest","hasXDomainRequest","cors","XMLHttpRequest","apply","arguments","prototype","_request","request","url","wrapRequest","resolve","reject","Network","headers","body","req","XDomainRequest","reqTimeout","timedOut","connected","setTimeout","onTimeout","timeouts","connect","onprogress","onProgress","onreadystatechange","onReadyStateChange","onload","onLoad","onerror","onError","open","method","forceAuthHeaders","setRequestHeader","send","clearTimeout","out","JSON","parse","responseText","statusCode","status","getAllResponseHeaders","e","UnparsableJSON","more","event","abort","RequestTimeout","onConnect","complete","readyState","fallback","requestFallback","wrapJsonpRequest","jsonpRequestDone","err","content","_promise","rejectPromise","val","resolvePromise","delay","delayPromise","ms","resolveOnTimeout","all","promises"],"mappings":"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","sourcesContent":["'use strict';\n\nvar global = require('global');\nvar Promise = global.Promise || require('es6-promise').Promise;\n\n// This is the standalone browser build entry point\n// Browser implementation of the Algolia Search JavaScript client,\n// using XMLHttpRequest, XDomainRequest and JSONP as fallback\nmodule.exports = function createAlgoliasearch(AlgoliaSearch, uaSuffix) {\n  var inherits = require('inherits');\n  var errors = require('../errors');\n  var inlineHeaders = require('./inline-headers');\n  var jsonpRequest = require('./jsonp-request');\n  var places = require('../places.js');\n  uaSuffix = uaSuffix || '';\n\n  if (process.env.NODE_ENV === 'debug') {\n    require('debug').enable('algoliasearch*');\n  }\n\n  function algoliasearch(applicationID, apiKey, opts) {\n    var cloneDeep = require('../clone.js');\n\n    opts = cloneDeep(opts || {});\n\n    opts._ua = opts._ua || algoliasearch.ua;\n\n    return new AlgoliaSearchBrowser(applicationID, apiKey, opts);\n  }\n\n  algoliasearch.version = require('../version.js');\n\n  algoliasearch.ua =\n    'Algolia for JavaScript (' + algoliasearch.version + '); ' + uaSuffix;\n\n  algoliasearch.initPlaces = places(algoliasearch);\n\n  // we expose into window no matter how we are used, this will allow\n  // us to easily debug any website running algolia\n  global.__algolia = {\n    debug: require('debug'),\n    algoliasearch: algoliasearch\n  };\n\n  var support = {\n    hasXMLHttpRequest: 'XMLHttpRequest' in global,\n    hasXDomainRequest: 'XDomainRequest' in global\n  };\n\n  if (support.hasXMLHttpRequest) {\n    support.cors = 'withCredentials' in new XMLHttpRequest();\n  }\n\n  function AlgoliaSearchBrowser() {\n    // call AlgoliaSearch constructor\n    AlgoliaSearch.apply(this, arguments);\n  }\n\n  inherits(AlgoliaSearchBrowser, AlgoliaSearch);\n\n  AlgoliaSearchBrowser.prototype._request = function request(url, opts) {\n    return new Promise(function wrapRequest(resolve, reject) {\n      // no cors or XDomainRequest, no request\n      if (!support.cors && !support.hasXDomainRequest) {\n        // very old browser, not supported\n        reject(new errors.Network('CORS not supported'));\n        return;\n      }\n\n      url = inlineHeaders(url, opts.headers);\n\n      var body = opts.body;\n      var req = support.cors ? new XMLHttpRequest() : new XDomainRequest();\n      var reqTimeout;\n      var timedOut;\n      var connected = false;\n\n      reqTimeout = setTimeout(onTimeout, opts.timeouts.connect);\n      // we set an empty onprogress listener\n      // so that XDomainRequest on IE9 is not aborted\n      // refs:\n      //  - https://github.com/algolia/algoliasearch-client-js/issues/76\n      //  - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n      req.onprogress = onProgress;\n      if ('onreadystatechange' in req) req.onreadystatechange = onReadyStateChange;\n      req.onload = onLoad;\n      req.onerror = onError;\n\n      // do not rely on default XHR async flag, as some analytics code like hotjar\n      // breaks it and set it to false by default\n      if (req instanceof XMLHttpRequest) {\n        req.open(opts.method, url, true);\n\n        // The Analytics API never accepts Auth headers as query string\n        // this option exists specifically for them.\n        if (opts.forceAuthHeaders) {\n          req.setRequestHeader(\n            'x-algolia-application-id',\n            opts.headers['x-algolia-application-id']\n          );\n          req.setRequestHeader(\n            'x-algolia-api-key',\n            opts.headers['x-algolia-api-key']\n          );\n        }\n      } else {\n        req.open(opts.method, url);\n      }\n\n      // headers are meant to be sent after open\n      if (support.cors) {\n        if (body) {\n          if (opts.method === 'POST') {\n            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests\n            req.setRequestHeader('content-type', 'application/x-www-form-urlencoded');\n          } else {\n            req.setRequestHeader('content-type', 'application/json');\n          }\n        }\n        req.setRequestHeader('accept', 'application/json');\n      }\n\n      if (body) {\n        req.send(body);\n      } else {\n        req.send();\n      }\n\n      // event object not received in IE8, at least\n      // but we do not use it, still important to note\n      function onLoad(/* event */) {\n        // When browser does not supports req.timeout, we can\n        // have both a load and timeout event, since handled by a dumb setTimeout\n        if (timedOut) {\n          return;\n        }\n\n        clearTimeout(reqTimeout);\n\n        var out;\n\n        try {\n          out = {\n            body: JSON.parse(req.responseText),\n            responseText: req.responseText,\n            statusCode: req.status,\n            // XDomainRequest does not have any response headers\n            headers: req.getAllResponseHeaders && req.getAllResponseHeaders() || {}\n          };\n        } catch (e) {\n          out = new errors.UnparsableJSON({\n            more: req.responseText\n          });\n        }\n\n        if (out instanceof errors.UnparsableJSON) {\n          reject(out);\n        } else {\n          resolve(out);\n        }\n      }\n\n      function onError(event) {\n        if (timedOut) {\n          return;\n        }\n\n        clearTimeout(reqTimeout);\n\n        // error event is trigerred both with XDR/XHR on:\n        //   - DNS error\n        //   - unallowed cross domain request\n        reject(\n          new errors.Network({\n            more: event\n          })\n        );\n      }\n\n      function onTimeout() {\n        timedOut = true;\n        req.abort();\n\n        reject(new errors.RequestTimeout());\n      }\n\n      function onConnect() {\n        connected = true;\n        clearTimeout(reqTimeout);\n        reqTimeout = setTimeout(onTimeout, opts.timeouts.complete);\n      }\n\n      function onProgress() {\n        if (!connected) onConnect();\n      }\n\n      function onReadyStateChange() {\n        if (!connected && req.readyState > 1) onConnect();\n      }\n    });\n  };\n\n  AlgoliaSearchBrowser.prototype._request.fallback = function requestFallback(url, opts) {\n    url = inlineHeaders(url, opts.headers);\n\n    return new Promise(function wrapJsonpRequest(resolve, reject) {\n      jsonpRequest(url, opts, function jsonpRequestDone(err, content) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(content);\n      });\n    });\n  };\n\n  AlgoliaSearchBrowser.prototype._promise = {\n    reject: function rejectPromise(val) {\n      return Promise.reject(val);\n    },\n    resolve: function resolvePromise(val) {\n      return Promise.resolve(val);\n    },\n    delay: function delayPromise(ms) {\n      return new Promise(function resolveOnTimeout(resolve/* , reject*/) {\n        setTimeout(resolve, ms);\n      });\n    },\n    all: function all(promises) {\n      return Promise.all(promises);\n    }\n  };\n\n  return algoliasearch;\n};\n"]},"metadata":{},"sourceType":"script"}
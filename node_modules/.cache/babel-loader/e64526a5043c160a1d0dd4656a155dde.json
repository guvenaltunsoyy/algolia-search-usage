{"ast":null,"code":"var foreach = require('foreach');\n\nmodule.exports = function merge(destination\n/* , sources */\n) {\n  var sources = Array.prototype.slice.call(arguments);\n  foreach(sources, function (source) {\n    for (var keyName in source) {\n      if (source.hasOwnProperty(keyName)) {\n        if (typeof destination[keyName] === 'object' && typeof source[keyName] === 'object') {\n          destination[keyName] = merge({}, destination[keyName], source[keyName]);\n        } else if (source[keyName] !== undefined) {\n          destination[keyName] = source[keyName];\n        }\n      }\n    }\n  });\n  return destination;\n};","map":{"version":3,"sources":["/Users/guvenaltunsoy/Desktop/react/algolia-example/node_modules/algoliasearch/src/merge.js"],"names":["foreach","require","module","exports","merge","destination","sources","Array","prototype","slice","call","arguments","source","keyName","hasOwnProperty","undefined"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC;AAAW;AAA1B,EAA2C;AAC1D,MAAIC,OAAO,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAd;AAEAX,EAAAA,OAAO,CAACM,OAAD,EAAU,UAASM,MAAT,EAAiB;AAChC,SAAK,IAAIC,OAAT,IAAoBD,MAApB,EAA4B;AAC1B,UAAIA,MAAM,CAACE,cAAP,CAAsBD,OAAtB,CAAJ,EAAoC;AAClC,YAAI,OAAOR,WAAW,CAACQ,OAAD,CAAlB,KAAgC,QAAhC,IAA4C,OAAOD,MAAM,CAACC,OAAD,CAAb,KAA2B,QAA3E,EAAqF;AACnFR,UAAAA,WAAW,CAACQ,OAAD,CAAX,GAAuBT,KAAK,CAAC,EAAD,EAAKC,WAAW,CAACQ,OAAD,CAAhB,EAA2BD,MAAM,CAACC,OAAD,CAAjC,CAA5B;AACD,SAFD,MAEO,IAAID,MAAM,CAACC,OAAD,CAAN,KAAoBE,SAAxB,EAAmC;AACxCV,UAAAA,WAAW,CAACQ,OAAD,CAAX,GAAuBD,MAAM,CAACC,OAAD,CAA7B;AACD;AACF;AACF;AACF,GAVM,CAAP;AAYA,SAAOR,WAAP;AACD,CAhBD","sourcesContent":["var foreach = require('foreach');\n\nmodule.exports = function merge(destination/* , sources */) {\n  var sources = Array.prototype.slice.call(arguments);\n\n  foreach(sources, function(source) {\n    for (var keyName in source) {\n      if (source.hasOwnProperty(keyName)) {\n        if (typeof destination[keyName] === 'object' && typeof source[keyName] === 'object') {\n          destination[keyName] = merge({}, destination[keyName], source[keyName]);\n        } else if (source[keyName] !== undefined) {\n          destination[keyName] = source[keyName];\n        }\n      }\n    }\n  });\n\n  return destination;\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"module.exports = createPlacesClient;\n\nvar qs3 = require('querystring-es3');\n\nvar buildSearchMethod = require('./buildSearchMethod.js');\n\nfunction createPlacesClient(algoliasearch) {\n  return function places(appID, apiKey, opts) {\n    var cloneDeep = require('./clone.js');\n\n    opts = opts && cloneDeep(opts) || {};\n    opts.hosts = opts.hosts || ['places-dsn.algolia.net', 'places-1.algolianet.com', 'places-2.algolianet.com', 'places-3.algolianet.com']; // allow initPlaces() no arguments => community rate limited\n\n    if (arguments.length === 0 || typeof appID === 'object' || appID === undefined) {\n      appID = '';\n      apiKey = '';\n      opts._allowEmptyCredentials = true;\n    }\n\n    var client = algoliasearch(appID, apiKey, opts);\n    var index = client.initIndex('places');\n    index.search = buildSearchMethod('query', '/1/places/query');\n\n    index.reverse = function (options, callback) {\n      var encoded = qs3.encode(options);\n      return this.as._jsonRequest({\n        method: 'GET',\n        url: '/1/places/reverse?' + encoded,\n        hostType: 'read',\n        callback: callback\n      });\n    };\n\n    index.getObject = function (objectID, callback) {\n      return this.as._jsonRequest({\n        method: 'GET',\n        url: '/1/places/' + encodeURIComponent(objectID),\n        hostType: 'read',\n        callback: callback\n      });\n    };\n\n    return index;\n  };\n}","map":{"version":3,"sources":["/Users/guvenaltunsoy/Desktop/react/algolia-example/node_modules/algoliasearch/src/places.js"],"names":["module","exports","createPlacesClient","qs3","require","buildSearchMethod","algoliasearch","places","appID","apiKey","opts","cloneDeep","hosts","arguments","length","undefined","_allowEmptyCredentials","client","index","initIndex","search","reverse","options","callback","encoded","encode","as","_jsonRequest","method","url","hostType","getObject","objectID","encodeURIComponent"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,kBAAjB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAjB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,wBAAD,CAA/B;;AAEA,SAASF,kBAAT,CAA4BI,aAA5B,EAA2C;AACzC,SAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqC;AAC1C,QAAIC,SAAS,GAAGP,OAAO,CAAC,YAAD,CAAvB;;AAEAM,IAAAA,IAAI,GAAGA,IAAI,IAAIC,SAAS,CAACD,IAAD,CAAjB,IAA2B,EAAlC;AACAA,IAAAA,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,IAAc,CACzB,wBADyB,EAEzB,yBAFyB,EAGzB,yBAHyB,EAIzB,yBAJyB,CAA3B,CAJ0C,CAW1C;;AACA,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAArB,IAA0B,OAAON,KAAP,KAAiB,QAA3C,IAAuDA,KAAK,KAAKO,SAArE,EAAgF;AAC9EP,MAAAA,KAAK,GAAG,EAAR;AACAC,MAAAA,MAAM,GAAG,EAAT;AACAC,MAAAA,IAAI,CAACM,sBAAL,GAA8B,IAA9B;AACD;;AAED,QAAIC,MAAM,GAAGX,aAAa,CAACE,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,CAA1B;AACA,QAAIQ,KAAK,GAAGD,MAAM,CAACE,SAAP,CAAiB,QAAjB,CAAZ;AACAD,IAAAA,KAAK,CAACE,MAAN,GAAef,iBAAiB,CAAC,OAAD,EAAU,iBAAV,CAAhC;;AACAa,IAAAA,KAAK,CAACG,OAAN,GAAgB,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC1C,UAAIC,OAAO,GAAGrB,GAAG,CAACsB,MAAJ,CAAWH,OAAX,CAAd;AAEA,aAAO,KAAKI,EAAL,CAAQC,YAAR,CAAqB;AAC1BC,QAAAA,MAAM,EAAE,KADkB;AAE1BC,QAAAA,GAAG,EAAE,uBAAuBL,OAFF;AAG1BM,QAAAA,QAAQ,EAAE,MAHgB;AAI1BP,QAAAA,QAAQ,EAAEA;AAJgB,OAArB,CAAP;AAMD,KATD;;AAWAL,IAAAA,KAAK,CAACa,SAAN,GAAkB,UAASC,QAAT,EAAmBT,QAAnB,EAA6B;AAC7C,aAAO,KAAKG,EAAL,CAAQC,YAAR,CAAqB;AAC1BC,QAAAA,MAAM,EAAE,KADkB;AAE1BC,QAAAA,GAAG,EAAE,eAAeI,kBAAkB,CAACD,QAAD,CAFZ;AAG1BF,QAAAA,QAAQ,EAAE,MAHgB;AAI1BP,QAAAA,QAAQ,EAAEA;AAJgB,OAArB,CAAP;AAMD,KAPD;;AAQA,WAAOL,KAAP;AACD,GAzCD;AA0CD","sourcesContent":["module.exports = createPlacesClient;\n\nvar qs3 = require('querystring-es3');\nvar buildSearchMethod = require('./buildSearchMethod.js');\n\nfunction createPlacesClient(algoliasearch) {\n  return function places(appID, apiKey, opts) {\n    var cloneDeep = require('./clone.js');\n\n    opts = opts && cloneDeep(opts) || {};\n    opts.hosts = opts.hosts || [\n      'places-dsn.algolia.net',\n      'places-1.algolianet.com',\n      'places-2.algolianet.com',\n      'places-3.algolianet.com'\n    ];\n\n    // allow initPlaces() no arguments => community rate limited\n    if (arguments.length === 0 || typeof appID === 'object' || appID === undefined) {\n      appID = '';\n      apiKey = '';\n      opts._allowEmptyCredentials = true;\n    }\n\n    var client = algoliasearch(appID, apiKey, opts);\n    var index = client.initIndex('places');\n    index.search = buildSearchMethod('query', '/1/places/query');\n    index.reverse = function(options, callback) {\n      var encoded = qs3.encode(options);\n\n      return this.as._jsonRequest({\n        method: 'GET',\n        url: '/1/places/reverse?' + encoded,\n        hostType: 'read',\n        callback: callback\n      });\n    };\n\n    index.getObject = function(objectID, callback) {\n      return this.as._jsonRequest({\n        method: 'GET',\n        url: '/1/places/' + encodeURIComponent(objectID),\n        hostType: 'read',\n        callback: callback\n      });\n    };\n    return index;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}